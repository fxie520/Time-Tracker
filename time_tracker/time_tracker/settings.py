"""
Django settings for time_tracker project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Inside docker or running on GitHub runner
if os.environ.get('DOCKER') == 'True':

    # Local development
    if os.environ.get('DEBUG') == 'True':
        DEBUG = True
        ALLOWED_HOSTS = ['*']

    # Deployment or GitHub CI workflow
    else:
        DEBUG = False
        ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',')

# Local development without docker
else:
    from . import environment_variables
    from .environment_variables import debug, allowed_hosts

    environment_variables.setVar()

    DEBUG = debug
    ALLOWED_HOSTS = allowed_hosts

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')


# Application definition
INSTALLED_APPS = [
    'debug_toolbar',  # Django debug toolbar
    'classic_tracker.apps.ClassicTrackerConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'rest_framework',  # Django REST framework
    # 'drf_spectacular',  # drf-spectacular (OpenAPI 3 schema generation for Django REST framework)
]

MIDDLEWARE = [
    # Django debug toolbar
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'time_tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'time_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'time_tracker_db',
        'USER': 'root',  # Use root user so that python3 manage.py test runs without error
        'PASSWORD': os.environ.get('MYSQL_ROOT_PASSWORD'),
        'HOST': os.environ.get('MYSQL_HOST'),
        'PORT': '3306',
        'CONN_MAX_AGE': 60,  # Persistent connection
        'CONN_HEALTH_CHECKS': True,
    }
}

# Cache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.environ.get('REDIS_LOCATION'),
        'TIMEOUT': 300,  # In seconds
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'  # Django looks at my_app/STATIC_URL for application level static files in DEBUG mode
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')  # Dir to gather static files when running collectstatic
STATICFILES_DIRS = [  # Django looks at STATICFILES_DIRS for project-level static files in DEBUG mode
    os.path.join(BASE_DIR, 'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'classic_tracker.User'

# URL to redirect after login
LOGIN_REDIRECT_URL = 'home'

# Email
EMAIL_BACKEND = 'time_tracker.email_backend.AmazonSESEmailBackend'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_KEY = os.environ.get('AWS_SECRET_KEY')
AWS_REGION = os.environ.get('AWS_REGION')
DOMAIN_NAME = os.environ.get('DOMAIN_NAME')

# Session
SESSION_COOKIE_SECURE = True
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# CSRF
CSRF_TRUSTED_ORIGINS = ['https://*.timetracker.club']  # Trusted origins for unsafe requests (e.g. POST).
CSRF_COOKIE_SECURE = True

# Django debug toolbar settings
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
}
INTERNAL_IPS = [
    "127.0.0.1",
]

# Django REST framework
# REST_FRAMEWORK = {
#     'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
# }
